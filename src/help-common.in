// -*- mode: rust -*-

// ------------------------------------------------------------------------
// Common help
// ------------------------------------------------------------------------

use lazy_static::lazy_static;

const HELP_AVAILABLE: &str = "
\x1b[4m\x1b[1mDescription:\x1b[22m\x1b[24m
  List R versions available to install.

  By default some releases are omitted from the output:
  - Versions older than R 3.0.0 are omitted. The installation of these
    might not work at all.
  - Only the latest release is shown for each minor version. E.g.
    R 4.2.3 is listed, but other R 4.2.x versions are not.
  Use `--all` to list all versions.

  Use `--json` to return the output in JSON. JSON output includes the
  full time stamp (if available) and the download URL as well.

  With the  `--list-distros` flag it lists supported Linux distributions.

  With the `--list-rtools-versions` flag it lists supported Rtools versions.
  Rtools contains tools to build R and R packages on Windows.
  Use `--all` to list all Rtools versions, even very old ones.";

const HELP_LIBRARY: &str = "
\x1b[4m\x1b[1mDescription:\x1b[22m\x1b[24m
  Manage package libraries [alias: lib] (experimental)

  rig supports multiple user package libraries. The usual user library is
  called \"main\".

  `rig library default` shows or sets the default library for the
   current R version.
  `rig library list` lists all libraries for the current R version.
  `rig library add` adds a new library for the current R version.
  `rig library rm` deletes a library, including all packages in it.
  It is not possible to delete the current default library, and it is not
  possible to delete the main library.

  User libraries are implemented at the user level, no administrator or
  root password is needed to add, set or delete them. If you delete an
  R installation, the user package libraries and their configurations are
  kept for all users on the system.

  `rig library` is currently experimental, and might change in future
  versions. Feedback is appreciated.";

const HELP_ABOUT_PRE: &str = "\x1b[4m\x1b[1mName:\x1b[22m\x1b[24m
  rig - manage R installations

\x1b[4m\x1b[1mDescription:\x1b[22m\x1b[24m
  rig manages your R installations, on macOS, Windows, and Linux. It can
  install and set up multiple versions of R, and make sure that they work
  together.";

const HELP_ABOUT_POST: &str = "
  rig is currently experimental and is a work in progress. Feedback is much
  appreciated. See https://github.com/r-lib/rig for bug reports.";

lazy_static! {
    static ref HELP_ABOUT_REAL: String =
        HELP_ABOUT_PRE.to_string() + HELP_ABOUT + HELP_ABOUT_POST;
}

const HELP_SYSTEM_LIB: &str = "
\x1b[4m\x1b[1mDescription:\x1b[22m\x1b[24m
  Set up R to create user package libraries when started, by default for
  installed R versions.

  `rig add` runs `rig system create-lib`, so if you only use rig to
  install R, then you do not need to run it manually.";

const HELP_RUN: &str = "
\x1b[4m\x1b[1mDescription:\x1b[22m\x1b[24m
  Run R, an R script or an R project, using the selected R version.

  All of these examples allow an `--r-version` argument, to use a specific
  R version.

  Start R:
    rig run
  Run an R script:
    rig run -f <script-file>
  Evaluate an R expression:
    rig run -e <expression>
  Run a script from a package (from its `exec` directory):
    rig run <pkg>::<script>
  Run an R app:
    rig run <path-to-app>

  Currently supported apps are:
  - Plumber APIs,
  - Shiny apps,
  - Quarto documents embedding Shiny apps,
  - Quarto documents,
  - Rmd documents,
  - Rmd documents embedding Shiny apps,
  - Static web sites.";
